@page "/{EpisodeIdentifier}"
@using OfficeQuotes.Core.Models
@using OfficeQuotesBlazor.Components
@inject OfficeQuotesFullData OfficeQuotesFullData
<CharacterQuotes Small="false" />


@if (EpisodeData == null)
{
    <i>No data for that episode was found. Check the season and episode, then try again.</i>
}
else
{
<h1 class="blockquote text-center">@OfficeQuotesFullData.EpisodeDataList.First(x => x.Episode == _episode && x.Season == _season).EpisodeName</h1>
<footer class="text-muted text-center">Season: @_season - Episode @_episode</footer>

    <h1></h1>
    <BSListGroup>
        @foreach (var quote in EpisodeData)
        {
            <BSListGroupItem><b>@quote.Quote.Character</b>: @quote.Quote.Text</BSListGroupItem>
        }
    </BSListGroup>
}

@code{

    [Parameter]
    public string EpisodeIdentifier { get; set; }

    private int _season;
    private int _episode;

    private List<FullQuoteInfo> EpisodeData { get; set; }

    protected override void OnParametersSet()
    {
        if (!EpisodeIdentifier.StartsWith("S", StringComparison.InvariantCultureIgnoreCase)) return;

        var seasonString = EpisodeIdentifier[1];

        if (!EpisodeIdentifier.Contains("E", StringComparison.InvariantCultureIgnoreCase)) return;

        var episodeStart = EpisodeIdentifier.IndexOf('E', StringComparison.InvariantCultureIgnoreCase);
        var episodeString = EpisodeIdentifier.Substring(episodeStart + 1);

        if (!int.TryParse(seasonString.ToString(), out _season) || !int.TryParse(episodeString, out _episode)) return;

        EpisodeData = OfficeQuotesFullData.FullQuoteInfoList.Where(x => x.Episode.Season == _season && x.Episode.Episode == _episode).ToList();
    }

}